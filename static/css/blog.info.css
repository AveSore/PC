@charset "UTF-8";
@import url(../_lib/bootstrap/css/bootstrap.min.css);
.wrap {
  *zoom: 1; }
  .wrap:before, .wrap:after {
    content: "";
    display: table;
    font: 0/0 a; }
  .wrap:after {
    clear: both; }

/*$_columns: 12 !default;      // 总列数
$_column-width: 60px !default;   // 单列宽
$_gutter: 20px !default;     // 间隔

@function get_width($columns:$_columns, $onlyInnerWidth: true, $_subtract:0){
  // 默认返回值
  $return: ($_column-width + $_gutter) * $columns - $_subtract !default;

  @if $onlyInnerWidth == true{
    //如果$onlyInnerWidth为true，那么减掉一个间隔$_gutter
    $return: ($_column-width + $_gutter) * $columns - $_gutter - $_subtract;
  }

  @return $return;
}
//调用
#container{
  width:get_width(12,false);//960px
}
.col-four{
  @extend %clearfix;
  .col{
    float: left;
    margin:0 $_gutter / 2;
    width:get_width(3); //220px

    h2{
      padding-left:10px;
      width:get_width(3,true,10px); //210px
    }
  }
}*/
html {
  width: 100%;
  height: 100%;
  background-size: 100% 100%; }

html,
body {
  margin: 0;
  padding: 0;
  cursor: default;
  font-size: 12px;
  font-family: 'Open Sans', sans-serif;
  box-sizing: border-box;
  background: transparent; }

/*
一切应为Border-box,虽然很多初学者并不了解box-sizing这个属性，但是它确实相当的重要。而最好的理解它的方式就是看看它的两种取值:
默认值为content-box，即当我们设置某个元素的height/width属性时，仅仅会作用于其内容尺寸。
而所有的内边距与边都是在其之上的累加，譬如某个<div>标签设置为宽100，内边距为10，
那么最终元素会占用120(100 + 2*10)的像素。
border-box:内边距与边是包含在了width/height之内，譬如设置了width:100px的<div>无论其内边距或者边长设置为多少，
其占有的大小都是100px。
将元素设置为border-box会很方便你进行样式布局，
这样的话你就可以在父元素设置高宽限制而不担心子元素的内边距或者边打破了这种限制。
*/
h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
li {
  margin: 0;
  padding: 0; }

a {
  text-decoration: none; }
  a:link {
    text-decoration: none; }
  a:visited {
    text-decoration: none; }
  a:hover {
    text-decoration: none; }
  a:active {
    text-decoration: none; }

ul, li {
  list-style-type: none; }

em {
  font-style: normal; }

#mask {
  background: rgba(0, 0, 0, 0.3);
  width: 100%;
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 2; }

.content-mask {
  background: rgba(0, 0, 0, 0.5);
  width: 100%;
  height: 100%;
  margin-top: 50px;
  overflow: hidden; }

header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: #000;
  z-index: 10;
  border-bottom: 1px solid #ddd; }
header .navbar-default {
  background: transparent;
  margin-bottom: 0;
  border: none;
  border-radius: 0; }
header #navbar li {
  margin-right: 10px;
  font-size: 18px; }
  header #navbar li a {
    color: #fff;
    position: relative; }
    header #navbar li a:before {
      position: absolute;
      top: 15px;
      left: 15px;
      overflow: hidden;
      max-width: 0;
      border-bottom: 2px solid #EEE048;
      color: #EEE048;
      content: attr(data-hover);
      -webkit-transition: max-width 0.5s;
      -moz-transition: max-width 0.5s;
      transition: max-width 0.5s; }
  header #navbar li.active a {
    color: #EEE048;
    background: transparent; }

@media (max-width: 767px) {
  header #navbar li a:before {
    top: 10px; } }
header #navbar li a:hover::before {
  max-width: 100%; }

html {
  background: #fff url("../img/2.jpg") no-repeat;
  width: 100%;
  height: 100%;
  background-size: 100% 100%;
  background-attachment: fixed; }

.content {
  width: 80%;
  border-radius: 12px;
  padding: 30px;
  background: rgba(255, 255, 255, 0.6);
  margin: 100px auto 50px auto; }
.content h1 {
  text-align: center; }
.content .tags {
  text-align: center;
  margin: 20px 0; }
  .content .tags span {
    margin-right: 20px; }
    .content .tags span i {
      margin-right: 10px; }
.content .info p {
  text-indent: 2em;
  font-size: 15px;
  line-height: 30px; }
.content .info img {
  width: 100%;
  border-radius: 6px;
  display: block;
  margin: 20px 0; }

/*# sourceMappingURL=blog.info.css.map */
